// AI Health Advisor (Multi-language)
const aiDoctor = {
    underweight: {
        en: "ЁЯЪи CYBER-DIAGNOSIS: NUTRIENT BOOST REQUIRED! Consume protein matrices and energy gels.",
        hi: "ЁЯЪи рд╕рд╛рдЗрдмрд░-рдирд┐рджрд╛рди: рдкреЛрд╖рдХ рддрддреНрд╡ рдмреВрд╕реНрдЯ рдЖрд╡рд╢реНрдпрдХ! рдкреНрд░реЛрдЯреАрди рдореИрдЯреНрд░рд┐рдХреНрд╕ рдФрд░ рдКрд░реНрдЬрд╛ рдЬреЗрд▓ рдХрд╛ рд╕реЗрд╡рди рдХрд░реЗрдВред",
        bn: "ЁЯЪи рж╕рж╛ржЗржмрж╛рж░-ржбрж╛ржпрж╝рж╛ржЧржирзЛрж╕рж┐рж╕: ржкрзБрж╖рзНржЯрж┐ ржмрзБрж╕рзНржЯ ржкрзНрж░ржпрж╝рзЛржЬржи! ржкрзНрж░рзЛржЯрж┐ржи ржорзНржпрж╛ржЯрзНрж░рж┐ржХрзНрж╕ ржПржмржВ рж╢ржХрзНрждрж┐ ржЬрзЗрж▓ ржЧрзНрж░рж╣ржг ржХрж░рзБржиред",
        tr: "ЁЯЪи S─░BER-TE┼ЮH─░S: BES─░N TAKV─░YES─░ GEREKL─░! Protein matrisleri ve enerji jelleri t├╝ketin.",
        id: "ЁЯЪи DIAGNOSIS CYBER: BUTUH NUTRISI TAMBAHAN! Konsumsi matriks protein dan gel energi."
    },
    normal: {
        en: "тЬЕ SYSTEM OPTIMAL: Maintain neural synchronization with regular training protocols.",
        hi: "тЬЕ рд╕рд┐рд╕реНрдЯрдо рдЗрд╖реНрдЯрддрдо: рдирд┐рдпрдорд┐рдд рдкреНрд░рд╢рд┐рдХреНрд╖рдг рдкреНрд░реЛрдЯреЛрдХреЙрд▓ рдХреЗ рд╕рд╛рде рддрдВрддреНрд░рд┐рдХрд╛ рддреБрд▓реНрдпрдХрд╛рд▓рди рдмрдирд╛рдП рд░рдЦреЗрдВред",
        bn: "тЬЕ рж╕рж┐рж╕рзНржЯрзЗржо рж╕рж░рзНржмрзЛрждрзНрждржо: ржирж┐ржпрж╝ржорж┐ржд ржкрзНрж░рж╢рж┐ржХрзНрж╖ржг ржкрзНрж░рзЛржЯрзЛржХрж▓ рж╕рж╣ рж╕рзНржирж╛ржпрж╝рзБ рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛ржЗржЬрзЗрж╢ржи ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржиред",
        tr: "тЬЕ S─░STEM OPT─░MUM: D├╝zenli e─Яitim protokolleri ile n├╢ral senkronizasyonu koruyun.",
        id: "тЬЕ SISTEM OPTIMAL: Pertahankan sinkronisasi neural dengan protokol pelatihan rutin."
    }
};

// Neural Network Translator
const cyberTranslations = {
    en: { weight: "Neural Mass (kg):", height: "Neural Height:", calculate: "Initiate Scan" },
    hi: { weight: "рдиреНрдпреВрд░рд▓ рдорд╛рд╕ (рдХрд┐рд▓реЛ):", height: "рдиреНрдпреВрд░рд▓ рдКрдВрдЪрд╛рдИ:", calculate: "рд╕реНрдХреИрди рдЖрд░рдВрдн рдХрд░реЗрдВ" },
    bn: { weight: "ржирж┐ржЙрж░рж╛рж▓ ржнрж░ (ржХрзЗржЬрж┐):", height: "ржирж┐ржЙрж░рж╛рж▓ ржЙржЪрзНржЪрждрж╛:", calculate: "рж╕рзНржХрзНржпрж╛ржи рж╢рзБрж░рзБ ржХрж░рзБржи" },
    tr: { weight: "N├╢ral K├╝tle (kg):", height: "N├╢ral Y├╝kseklik:", calculate: "Tarama Ba┼Яlat" },
    id: { weight: "Massa Neural (kg):", height: "Tinggi Neural:", calculate: "Mulai Pemindaian" }
};

// Quantum Time System
function updateQuantumClock() {
    const options = {
        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: true,
        fractionalSecondDigits: 3
    };
    document.getElementById('liveClock').innerHTML = 
        `ЁЯХТ ${new Date().toLocaleTimeString(navigator.language, options)}<sup>${Math.floor(Math.random()*9)}</sup>`;
}

// GPS Neural Locator
function activateGPSTracking() {
    if (navigator.geolocation) {
        navigator.geolocation.watchPosition(position => {
            document.getElementById('location').innerHTML = 
                `ЁЯУб ${position.coords.latitude.toFixed(4)}N ${position.coords.longitude.toFixed(4)}E`;
        });
    }
}

// System Core
function initCyberSystem() {
    // Language detection
    const userLang = navigator.language.split('-')[0] || 'en';
    document.getElementById('language').value = userLang;
    updateTranslations(userLang);
    
    // Start systems
    setInterval(updateQuantumClock, 1);
    activateGPSTracking();
    
    // Load quantum state
    loadSystemState();
}

// Initialize cyber module
window.onload = initCyberSystem;
